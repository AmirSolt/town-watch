// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CrimeType string

const (
	CrimeTypeAssault               CrimeType = "Assault"
	CrimeTypeAutoTheft             CrimeType = "Auto Theft"
	CrimeTypeTheftfromMotorVehicle CrimeType = "Theft from Motor Vehicle"
	CrimeTypeBreakandEnter         CrimeType = "Break and Enter"
	CrimeTypeSexualViolation       CrimeType = "Sexual Violation"
	CrimeTypeRobbery               CrimeType = "Robbery"
	CrimeTypeTheftOver             CrimeType = "Theft Over"
	CrimeTypeBikeTheft             CrimeType = "Bike Theft"
	CrimeTypeShooting              CrimeType = "Shooting"
	CrimeTypeHomicide              CrimeType = "Homicide"
)

func (e *CrimeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrimeType(s)
	case string:
		*e = CrimeType(s)
	default:
		return fmt.Errorf("unsupported scan type for CrimeType: %T", src)
	}
	return nil
}

type NullCrimeType struct {
	CrimeType CrimeType
	Valid     bool // Valid is true if CrimeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrimeType) Scan(value interface{}) error {
	if value == nil {
		ns.CrimeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrimeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrimeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrimeType), nil
}

type Region string

const (
	RegionTORONTO Region = "TORONTO"
)

func (e *Region) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Region(s)
	case string:
		*e = Region(s)
	default:
		return fmt.Errorf("unsupported scan type for Region: %T", src)
	}
	return nil
}

type NullRegion struct {
	Region Region
	Valid  bool // Valid is true if Region is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRegion) Scan(value interface{}) error {
	if value == nil {
		ns.Region, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Region.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRegion) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Region), nil
}

type Tier string

const (
	TierT0 Tier = "t0"
	TierT1 Tier = "t1"
	TierT2 Tier = "t2"
)

func (e *Tier) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Tier(s)
	case string:
		*e = Tier(s)
	default:
		return fmt.Errorf("unsupported scan type for Tier: %T", src)
	}
	return nil
}

type NullTier struct {
	Tier  Tier
	Valid bool // Valid is true if Tier is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTier) Scan(value interface{}) error {
	if value == nil {
		ns.Tier, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Tier.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTier) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Tier), nil
}

type Notif struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
	IsSent    bool
	IsOpened  bool
	ScannerID int32
	UserID    pgtype.UUID
}

type Otp struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamptz
	ExpiresAt pgtype.Timestamptz
	IsActive  bool
	UserID    pgtype.UUID
}

type Report struct {
	ID            int32
	CreatedAt     pgtype.Timestamptz
	OccurAt       pgtype.Timestamptz
	ExternalSrcID string
	Neighborhood  pgtype.Text
	LocationType  pgtype.Text
	CrimeType     CrimeType
	Region        Region
	Point         interface{}
	Lat           float64
	Long          float64
}

type ReportNotif struct {
	CreatedAt pgtype.Timestamptz
	NotifID   pgtype.UUID
	ReportID  int32
}

type Scanner struct {
	ID        int32
	CreatedAt pgtype.Timestamptz
	IsActive  bool
	Address   string
	Region    Region
	Radius    float64
	Point     interface{}
	Lat       float64
	Long      float64
	UserID    pgtype.UUID
}

type User struct {
	ID                   pgtype.UUID
	Tier                 Tier
	CreatedAt            pgtype.Timestamptz
	Email                string
	StripeCustomerID     pgtype.Text
	StripeSubscriptionID pgtype.Text
}
